What is a framework? Why is Ruby on Rails popular?
  - A framework is a tool that builds out the main structure of your code for you. You can use the framework as a template and customize your app to fit your needs within the structure it provides.
What are alternative frameworks, compare.
  - The framework I'm most familiar with is Express.js, which seems to have a lot of similarity to Rails. One critisism I've found of Express is that there is not always one clear correct way of doing things. Both Express and Rails have a wide range of compatible libraries available through npm or gems. Both Express and Rails also have strong communities so it is generally pretty easy to find tutorials or resources for troubleshooting. Rails is said to beginner friendly but can sometimes be difficult in a production environment.
What are components of the RoR framework? How do they fit together?
  - Model: deals with the database and how the database, how it's organized, and how it's accessed including queries and ORMs
  - View: what is sent to the client, typically html
  - Controller: the connection between the model and the view, the logic that decides what to ask the model for and what view to plug it into
  - Routing: allows the url to direct which logic to run, can have params, makes RESTful apps possible
We're doing RoR with client side rendering. What does that mean?
  - Client side rendering puts more logic in the browser. One example is that a user could click a link and only the relevant section of the page reloads. In contrast, if it was server side rendering, even if 90% of the page is the same, when the user clicked the link, the server would send the whole html again and the entire page would reload.


sources:
https://hackr.io/blog/top-10-web-development-frameworks-in-2019
http://www.mindfiresolutions.com/blog/2018/06/ruby-web-frameworks-2018/
https://medium.freecodecamp.org/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d